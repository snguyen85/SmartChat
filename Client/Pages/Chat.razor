@page "/chat"
@page "/chat/{ConversationId}"
@attribute [Authorize] 

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using SmartChat.Shared.ViewModels
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject SmartChatService SmartChatService
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudPaper Elevation="25" Class="py-4 flex-grow-1">
    <MudToolBar Dense="true">
        @if (string.IsNullOrEmpty(ContactName))
        {
            <MudIcon Icon="@Icons.Material.Outlined.Person" Style="margin-right:10px"></MudIcon>
            <MudText Typo="Typo.h6">chat</MudText>
        }
        else
        {
            <MudIcon Icon="@Icons.Material.Outlined.ChatBubble" Style="margin-right:10px"></MudIcon>
            <MudText Typo="Typo.h6">@ContactName</MudText>
        }
    </MudToolBar>
    <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:scroll;" id="chatContainer">
        @foreach (var message in Messages)
        {
            <div class="d-flex flex-row my-4">
                <div class="mr-4">
                    <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">@message.AuthorName.ToUpper().FirstOrDefault()</MudAvatar>
                </div>
                <div>
                    <MudText Typo="Typo.body1">@message.AuthorName</MudText>
                    <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.Created.ToString("dd MMM, yyyy hh:mm tt")</MudText>
                    <MudText Typo="Typo.body2" Style=" padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">@message.Content</MudText>
                </div>
            </div>
        }
    </div>
    <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="">
        <MudTextField T="string" Placeholder="Enter your message..."DisableUnderLine="true" Class="mt-n2 mx-4"
                        @bind-Value="CurrentMessage" For="@(()=> CurrentMessage)" />
        <MudButton OnClick="SubmitAsync" StartIcon="@Icons.Material.Outlined.Send" Color="Color.Secondary" ButtonType="ButtonType.Button">Send</MudButton>
    </MudPaper>
</MudPaper>

@code {
    [CascadingParameter] public HubConnection hubConnection { get; set; }

    [Parameter] public ChatMode Mode { get; set; }

    [Parameter] public string CurrentMessage { get; set; }
    [Parameter] public string ContactName { get; set; }
    [Parameter] public string ContactId { get; set; }
    [Parameter] public long ConversationId { get; set; }
    [Parameter] public int RoomId {  get;  set; }
    [Parameter] public List<ChatMessage> Messages { get; set; } = new List<ChatMessage>();

    private string currentUserId = "";
    private string currentUserName = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
    }
    protected override async Task OnInitializedAsync()
    {
        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/signalRHub")).Build();
        }

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }

        hubConnection.On<ChatMessage>("ChatNotification", async (message) =>
        {
            if (Mode == ChatMode.UserChat)
            {
                if (message.ConversationId == ConversationId)
                {
                    if (!Messages.Exists(m => m.Id == message.Id))
                    {
                        Messages.Add(message);
                    }

                    StateHasChanged();
                }
            }
        });

        hubConnection.On<ChatMessage, Room>("RoomNotification", async (message, room) =>
        {
            if (Mode == ChatMode.RoomChat)
            {
                if (room.Id == RoomId)
                {
                    Messages.Add(message);

                    StateHasChanged();
                }
            }
        });

        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = state.User;

        currentUserId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        currentUserName = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
    }

    private async Task SubmitAsync()
    {
        if (Mode == ChatMode.UserChat)
        {
            if (!string.IsNullOrEmpty(CurrentMessage) && ConversationId > 0)
            {
                var messageId = await SmartChatService.SaveMessageAsync(ConversationId, CurrentMessage);
                var messageSent = new ChatMessage { 
                        Id = messageId,
                        AuthorName = currentUserName,
                        ConversationId = ConversationId,
                        Content = CurrentMessage,
                        Created = DateTime.UtcNow };

                if (messageId > 0)
                {
                    await hubConnection.SendAsync("BroadcastMessageAsync", messageSent, ContactId);

                    if (!Messages.Exists(m => m.Id == messageSent.Id))
                    {
                        Messages.Add(messageSent);
                    }
                }

                CurrentMessage = string.Empty;

                StateHasChanged();
            }
        }
        else
        {
            if (!string.IsNullOrEmpty(CurrentMessage) && RoomId > 0)
            {
                var messageId = await SmartChatService.SaveRoomMessageAsync(RoomId, CurrentMessage);
                
                var messageSent = new ChatMessage { 
                        Id = messageId,
                        AuthorName = currentUserName,
                        Content = CurrentMessage,
                        Created = DateTime.UtcNow };

                if (messageId > 0)
                {
                    await hubConnection.SendAsync("BroadcastRoomMessageAsync", messageSent, RoomId);

                    Messages.Add(messageSent);
                }

                CurrentMessage = string.Empty;

                StateHasChanged();
            }
        }
    }
}
