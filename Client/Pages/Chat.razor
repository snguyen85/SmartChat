@page "/chat"
@page "/chat/{ContactId}"
@attribute [Authorize] 

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using SmartChat.Shared.ViewModels

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject SmartChatService SmartChatService
@inject AuthenticationStateProvider AuthenticationStateProvider

            @if (string.IsNullOrEmpty(ContactId))
            {
<MudPaper Elevation="25" Class="py-4 flex-grow-1">
    <MudToolBar Dense="true">
        @if (string.IsNullOrEmpty(ContactId))
        {
            <MudIcon Icon="@Icons.Material.Outlined.Person" Style="margin-right:10px"></MudIcon>
            <MudText Typo="Typo.h6">chat</MudText>
        }
        else
        {
            <MudIcon Icon="@Icons.Material.Outlined.ChatBubble" Style="margin-right:10px"></MudIcon>
            <MudText Typo="Typo.h6">@ContactEmail</MudText>
        }
    </MudToolBar>
    <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:scroll;" id="chatContainer">
        @foreach (var message in Messages)
        {
            <div class="d-flex flex-row my-4">
                <div class="mr-4">
                    <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">@message.AuthorName.ToUpper().FirstOrDefault()</MudAvatar>
                </div>
                <div>
                    <MudText Typo="Typo.body1">@message.AuthorName</MudText>
                    <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.Created.ToString("dd MMM, yyyy hh:mm tt")</MudText>
                    <MudText Typo="Typo.body2" Style=" padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">@message.Content</MudText>
                </div>
            </div>
        }
    </div>
    <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="">
        <MudTextField T="string" Placeholder="Enter your message..."DisableUnderLine="true" Class="mt-n2 mx-4"
                        @bind-Value="CurrentMessage" For="@(()=> CurrentMessage)" />
        <MudButton OnClick="SubmitAsync" StartIcon="@Icons.Material.Outlined.Send" Color="Color.Secondary" ButtonType="ButtonType.Button">Send</MudButton>
    </MudPaper>
</MudPaper>

@code {
    [CascadingParameter] public HubConnection hubConnection { get; set; }

    [Parameter] public string CurrentUserId { get; set; }
    [Parameter] public string CurrentMessage { get; set; }
    [Parameter] public string ContactEmail { get; set; }
    [Parameter] public string ContactId { get; set; }

    [Parameter] public List<ChatMessage> Messages { get; set; } = new List<ChatMessage>();

    private async Task SubmitAsync()
    {
        if (!string.IsNullOrEmpty(CurrentMessage) && !string.IsNullOrEmpty(ContactId))
        {
            //Save Message to DB
            var chatHistory = new Message()
            {
                Content = CurrentMessage,
                AuthorId = CurrentUserId,
                Created = DateTime.UtcNow

            };

            await SmartChatService.SaveMessageAsync(chatHistory);
            chatHistory.AuthorId = CurrentUserId;
            //await hubConnection.SendAsync("SendMessageAsync", chatHistory, CurrentUserEmail);
            CurrentMessage = string.Empty;
        }
    }
}
