@page "/room"
@attribute [Authorize] 

@using Microsoft.AspNetCore.Authorization

@inject IDialogService DialogService
@inject SmartChatService SmartChatService

<MudPaper Elevation="25" Class="py-4 flex-grow-1">
    <MudToolBar Dense="true">
        <MudText Typo="Typo.h6" Inline="true" Class="mr-2">#</MudText>
        <MudText Typo="Typo.h6">rooms</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="OpenNewRoomDialog" />
    </MudToolBar>
    <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:scroll;" id="chatContainer">
        <MudGrid Justify="Justify.FlexStart">
            @foreach (var room in chatRooms)
            {
                <MudItem xs="3">
                    <MudPaper Class="d-flex flex-column justify-center mud-width-full pa-4">
                        <MudToolBar Dense="true">
                            <MudText Typo="Typo.h6">@room.Name</MudText>
                            <MudSpacer />
                            <MudIconButton Icon="@Icons.Material.Outlined.CheckCircle" Size="Size.Medium" OnClick="() => SubscribeToRoom(room.Id)"/>
                        </MudToolBar>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    </div>
</MudPaper>

@code {
    private List<Room> chatRooms = new List<Room>();

    private async void OpenNewRoomDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<NewRoomDialog>();

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            
        }
    }

    private async Task GetAllChatRoomsAsync()
    {
        chatRooms = await SmartChatService.GetAllChatRoomsAsync();
        StateHasChanged();
    }

    private async Task SubscribeToRoom(int roomId)
    {
        await SmartChatService.SubscribeToRoom(roomId);
    }
}
