@page "/"
@attribute [Authorize] 

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using SmartChat.Shared.ViewModels

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject SmartChatService SmartChatService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService

<div class="d-flex flex-grow-1 flex-row">
    <MudPaper Elevation="25" Class="py-4 flex-grow-1">
        <MudToolBar Dense="true">
            <MudText Typo="Typo.h6" Inline="true" Class="mr-2">#</MudText>
            <MudText Typo="Typo.h6">rooms</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="OpenNewRoomDialog" />
        </MudToolBar>
        <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:scroll;" id="chatContainer">
            @foreach (var room in ChatRooms)
            {
            }
        </div>
    </MudPaper>
    <MudPaper Elevation="25" Class="pa-3 ml-6" MinWidth="400px">
        <MudToolBar Dense="true">
            <MudText Typo="Typo.h6" Inline="true" Class="mr-2">#</MudText>
            <MudText Typo="Typo.h6">conversations</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Outlined.Add" />
        </MudToolBar>
        <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
            <MudList Clickable="true">
                @foreach (var user in ChatUsers)
                {
                    <MudListItem Class="pa-0 px-2" OnClick="@(() => LoadUserChat(user.Id))">
                        <div class="d-flex flex-row mt-n1 mb-n1">
                            <div class="mr-4">
                                <MudBadge Class="my-2">
                                    @if (user.Id == ContactId)
                                    {
                                        <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">@user.Email.ToUpper().FirstOrDefault()</MudAvatar>
                                    }
                                    else
                                    {
                                        <MudAvatar Color="Color.Dark" Style="height:50px; width:50px;">@user.Email.ToUpper().FirstOrDefault()</MudAvatar>
                                    }
                                </MudBadge>
                            </div>
                            <div>
                                <MudText Typo="Typo.body2" Class="mt-3 mb-n2">@user.Email</MudText>
                                <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@user.Id</MudText>
                            </div>
                        </div>
                    </MudListItem>
                }
            </MudList>
        </div>
    </MudPaper>
</div>

@code
{
    [CascadingParameter] public HubConnection hubConnection { get; set; }

    [Parameter] public string CurrentMessage { get; set; }
    [Parameter] public string CurrentUserId { get; set; }
    [Parameter] public string CurrentUserEmail { get; set; }

    [Parameter] public string ContactEmail { get; set; }
    [Parameter] public string ContactId { get; set; }

    private List<ChatMessage> messages = new List<ChatMessage>();
    public List<Room> ChatRooms = new List<Room>();
    public List<ApplicationUser> ChatUsers = new List<ApplicationUser>();

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = state.User;

        CurrentUserId = user.Claims.Where(a => a.Type == "sub").Select(a => a.Value).FirstOrDefault();
        CurrentUserEmail = user.Claims.Where(a => a.Type == "name").Select(a => a.Value).FirstOrDefault();

        //await GetAllConversationsAsync();
        await GetAllChatRoomsAsync();
    }

    private async Task GetAllConversationsAsync()
    {
        //ChatUsers = await SmartChatService.GetAllConversationsAsync();
    }

    private async Task GetAllChatRoomsAsync()
    {
        ChatRooms = await SmartChatService.GetAllChatRoomsAsync();
        StateHasChanged();
    }

    private void OpenNewRoomDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<NewRoomDialog>();
    }

    private async Task LoadUserChat(string UserId)
    {
        
    }
}
