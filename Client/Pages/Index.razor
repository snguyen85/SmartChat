@page "/"
@attribute [Authorize] 

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using SmartChat.Shared.ViewModels

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject SmartChatService SmartChatService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService

<div class="d-flex flex-grow-1 flex-row">
    <Chat ConversationId="selectedConversationId" Messages="messages" ContactName="@selectedContactName" ContactId="@selectedContactId" />
    <MudPaper Elevation="25" Class="pa-3 ml-6" MinWidth="400px">
        <MudToolBar Dense="true">
            <MudText Typo="Typo.h6" Inline="true" Class="mr-2">#</MudText>
            <MudText Typo="Typo.h6">conversations</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Outlined.Add" />
        </MudToolBar>
        <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
            <MudList Clickable="true">
                @foreach (var contact in contacts)
                {
                    <MudListItem Class="pa-0 px-2" OnClick="@(() => GetConversationAsync(contact.Id, contact.ConversationId))">
                        <div class="d-flex flex-row mt-n1 mb-n1">
                            <div class="mr-4 my-2">
                                @if (contact.Id == selectedContactId)
                                {
                                    <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">@contact.Username.ToUpper().FirstOrDefault()</MudAvatar>
                                }
                                else
                                {
                                    <MudAvatar Color="Color.Dark" Style="height:50px; width:50px;">@contact.Username.ToUpper().FirstOrDefault()</MudAvatar>
                                }
                            </div>
                            <div>
                                <MudText Typo="Typo.body2" Class="mt-3 mb-n2">@contact.Username</MudText>
                                <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@contact.Id</MudText>
                            </div>
                        </div>
                    </MudListItem>
                }
            </MudList>
        </div>
    </MudPaper>
</div>

@code
{
    long selectedConversationId = 0;
    string selectedContactId = "";
    string selectedContactName = "";

    List<SmartContact> contacts = new List<SmartContact>();
    List<ChatMessage> messages = new List<ChatMessage>();

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = state.User;

        await GetAllContactsAsync();
    }

    private async Task GetAllContactsAsync()
    {
        contacts = await SmartChatService.GetAllContactsAsync();
        StateHasChanged();
    }

    private async Task GetConversationAsync(string contactId, long conversationId)
    {
        selectedConversationId = conversationId;
        selectedContactId = contactId;
        selectedContactName = contacts.FirstOrDefault(c => c.Id == contactId)?.Username;

        messages = await SmartChatService.GetConversationAsync(conversationId);

        StateHasChanged();
    }
}
